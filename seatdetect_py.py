# -*- coding: utf-8 -*-
"""seatdetect.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oSv5GfcTIlBDY47WcjoULExR-bvB0g7P
"""

!pip install ultralytics --upgrade --quiet

pip install git+https://github.com/ultralytics/ultralytics.git@main

from ultralytics import YOLO
import cv2
from google.colab.patches import cv2_imshow

# ------------------------- IoU 계산 함수 -------------------------
def calculate_iou(box1, box2):
    """
    두 경계 상자 사이의 IoU (Intersection over Union) 계산
    box = [x1, y1, x2, y2]
    """
    x1 = max(box1[0], box2[0])
    y1 = max(box1[1], box2[1])
    x2 = min(box1[2], box2[2])
    y2 = min(box1[3], box2[3])

    intersection = max(0, x2 - x1) * max(0, y2 - y1)
    box1_area = (box1[2] - box1[0]) * (box1[3] - box1[1])
    box2_area = (box2[2] - box2[0]) * (box2[3] - box2[1])

    union = box1_area + box2_area - intersection
    return intersection / union if union > 0 else 0

# ------------------------- YOLO 모델 설정 -------------------------
model_path = "/content/yolo11n.pt"  # YOLO 모델 경로
image_path = "/content/test_image.jpg"  # 테스트 이미지 경로

model = YOLO(model_path)

# ------------------------- 이미지 읽기 -------------------------
image = cv2.imread(image_path)
if image is None:
    raise ValueError("이미지를 불러올 수 없습니다.")

# ------------------------- 객체 감지 수행 -------------------------
results = model(image)

# ------------------------- 객체 필터링 -------------------------
people_boxes = []  # 사람 객체 저장
chair_boxes = []   # 의자 객체 저장

for result in results:
    for box in result.boxes:
        label = model.names[int(box.cls[0])]
        if label == "person":
            people_boxes.append(box.xyxy[0].tolist())  # 사람 경계 상자 저장
        elif label == "chair":
            chair_boxes.append(box.xyxy[0].tolist())  # 의자 경계 상자 저장

# ------------------------- 점유된 의자 수 계산 -------------------------
occupied_seats = 0  # 사람이 앉아있는 의자 수
for chair in chair_boxes:
    for person in people_boxes:
        iou = calculate_iou(chair, person)  # IoU 계산
        if iou > 0.1:  # IoU 기준 설정 (0.1 이상이면 점유된 것으로 판단)
            occupied_seats += 1
            break  # 이미 점유된 의자는 중복 계산 방지

# ------------------------- 결과 계산 -------------------------
total_chairs = len(chair_boxes)  # 전체 의자 수
available_chairs = total_chairs - occupied_seats  # 잔여 의자 수

# ------------------------- 결과 출력 -------------------------
print("\n좌석 감지 결과:")
print(f"전체 의자 수: {total_chairs}")
print(f"현재 차 있는 좌석 수: {occupied_seats}")
print(f"현재 잔여 좌석 수: {available_chairs}")

# ------------------------- 시각화 -------------------------
annotated_image = image.copy()
for chair in chair_boxes:
    cv2.rectangle(annotated_image, (int(chair[0]), int(chair[1])), (int(chair[2]), int(chair[3])), (0, 255, 0), 2)  # 의자 (초록색)
for person in people_boxes:
    cv2.rectangle(annotated_image, (int(person[0]), int(person[1])), (int(person[2]), int(person[3])), (255, 0, 0), 2)  # 사람 (파란색)

cv2_imshow(annotated_image)
print("객체 감지 완료!")

